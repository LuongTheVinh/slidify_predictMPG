summary(m2)
m2 <- glm(factor(chd) ~ age + alcohol + obesity + tobacco + typea + ldl, family = binomial, data=trainSA)
m2 <- train(chd2 ~ age + alcohol + obesity + tobacco + typea + ldl, family = binomial, data=trainSA, method = 'glm')
m2 <- train(chd2 ~ age + alcohol + obesity + tobacco + typea + ldl, method = 'glm', family = binomial, data=trainSA)
m2 <- train(chd2 ~ age + alcohol + obesity + tobacco + typea + ldl, method = 'glm', family = binomial, data=trainSA, na.action=na.omit)
?glm
m2 <- glm(chd2 ~ age + alcohol + obesity + tobacco + typea + ldl, family = binomial, na.action=na.omit)
summary(m2)
predict(m2, trainSA)
predict(m2, testSA)
m2 <- glm(chd2 ~ age + alcohol + obesity + tobacco + typea + ldl, family = binomial, na.action=na.omit)
q()
library(caret)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
set.seed(13234)
SAheart
m <- train(factor(chd) ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = 'glm', family = 'binomial')
summary(m$finalModel)
predict(m$finalModel, trainSA)
?predict
missClass(trainSA$chd, predict(m$finalModel, trainSA, type = response))
missClass(trainSA$chd, predict(m$finalModel, trainSA, type = 'response))
)
)
)
1
missClass(trainSA$chd, predict(m$finalModel, trainSA, type = 'response'))
missClass(testSA$chd, predict(m$finalModel, testSA, type = 'response'))
data(vowel.train)
data(vowel.test)
head(vowel.train)
class(vowel.train$y)
vowel.train$y = factor(vowel.train$y)
class(vowel.train$y)
vowel.test$y = factor(vowel.test$y)
set.seed( 33833)
m <- train(y ~ ., method = 'rf', data=vowel.train, prox=TRUE)
summary(m$finalModel)
fancyRpartPlot(m$finalModel)
library(rattle)
fancyRpartPlot(m$finalModel)
varImp(m$finalModel)
m <- train(y ~ ., method = 'rf', data=vowel.train, prox=TRUE, imp = 1)
varImp(m$finalModel)
?varImp
class(m)
class(m$finalModel)
varImp(m$finalModel)
m <- train(y ~ ., method = 'rf', data=vowel.train, prox=TRUE)
class(m$finalModel)
varImp(m$finalModel)
v <- varImp(m$finalModel)
v
order(v)
sort(v)
sort(v$Overall)
v[order(v$Overall)]
v[order(v$Overall),]
v
v$Overall
?order
class(v)
v[order(v$Overall), ]
data.frame(v[order(v$Overall), ])
v
?order
v
rownames(v)
v$r = rownames(v)
v
v[order(v$Overall),]
set.seed(33833)
m <- train(y ~ ., method = 'rf', data=vowel.train, prox=TRUE)
v <- varImp(m$finalModel)
v$r = rownames(v)
v
v[order(v$Overall),]
q(0)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(caret)
vowel.train
vowel.train$y = factor(vowel.train$y)
m <- train(y ~ ., method = 'rf', data=vowel.train, prox=TRUE)
m
varImp(m$finalModel)
v$r = rownames(v)
v <- varImp(m$finalModel)
v$r = rownames(v)
v[order(v$Overall),]
set.seed(33833)
m <- train(y ~ ., method = 'rf', data=vowel.train, prox=TRUE)
v <- varImp(m$finalModel)
v$r = rownames(v)
v[order(v$Overall),]
v[order(v$Overall, decreasing = TRUE),]
v2 <- varImp(m)
v2
install.packages("caretEnsemble")
install.packages("quantmod")
install.packages("quandl")
install.packages("Quandl")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y = factor(vowel.train$y)
vowel.test$y = factor(vowel.test$y)
set.seed(33833)
m1 <- train(y ~ ., data = vowel.train, method = 'rf', prox = TRUE)
?gbm
m2 <- train(y ~ ., data = vowel.train, method = 'gbm')
p1 <- predict(m1$finalModel, vowel.test)
p1
p2 <- predict(m2$finalModel, vowel.test)
m2$finalModel
install.packages(c("ada", "mboost", "gamBoost"))
install.packages(c("GAMBoost"))
class(m2$finalModel)
p2 <- predict(m2$finalModel, vowel.test)
?gbm
p2 <- predict(m2$finalModel, vowel.test, n.trees = 100)
p2
p1
p2
p2 <- predict(m2$finalModel, vowel.test, n.trees = 100, response.name = 'y')
p2
p2 <- predict(m2$finalModel, vowel.test, n.trees = 100)
p2
p2 <- predict(m2$finalModel, vowel.test, n.trees = 100)
a = vowel.train$y
a
p1
a = vowel.test$y
a
sum(p1 == a) / length(a)
sum(p2 == a) / length(a)
m2 <- train(y ~ ., data = vowel.train, method = 'gbm')
m2
m2
m2$finalModel
predict(m2$finalModel, vowel.test)
predict(m2$finalModel, vowel.test, n.trees =1)
predict(m2$finalModel, vowel.test, n.trees =100)
predict(m2$finalModel, vowel.test, n.trees =1)
predict(m2$finalModel, vowel.test, n.trees =100)
predict(m2$finalModel, vowel.test, n.trees =100, type = 'response')
predict(m2$finalModel, vowel.test, n.trees =100)
predict(m2$finalModel, vowel.test, n.trees =100, type = "response")
predict(m2$finalModel, vowel.test, n.trees =100, type = "response", single.tree = TRUE)
predict(m2$finalModel, vowel.test, n.trees =100, type = "response")
m2
predict(m2$finalModel, vowel.test, n.trees =150, type = "response")
?predict.gbm
predict(m2$finalModel, data = vowel.test, n.trees =150, type = "response")
m2$finalModel
m2
predict(m2$finalModel, vowel.train, n.trees =150, type = "response")
predict(m2$finalModel, vowel.test, n.trees =150, type = "response")
vowel.test$y
class(vowel.test$y)
class(vowel.train$y)
?gbm
q()
library(knitr)
plot(cars)
Title
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r fig.width=7, fig.height=6}
plot(cars)
```
q(0)
q()
q()
q()
install.packages(c(
'abind', 'ada', 'AER', 'akima', 'ape', 'ascii',
'BayesX', 'bdsmatrix', 'bit', 'bit64', 'brew',
'cacheSweave', 'Cairo', 'caret', 'catdata', 'cba', 'combinat', 'coin',
'coxme', 'cubature',
'data.table', 'date', 'deldir', 'DEoptimR', 'devtools', 'doSNOW', 'dynlm',
'e1071', 'earth', 'effects', 'elasticnet', 'ellipse', 'expsmooth',
'fastICA', 'fastmatch', 'fields', 'filehash', 'fit.models', 'fma',
'forecast', 'fpp', 'fracdiff',
'gam', 'GAMBoost', 'gclus', 'gdata',
'gbm', 'geepack', 'ggplot2', 'gof', 'googleVis', 'gplots', 'gsl',
'hexbin',
'igraph', 'igraphdata', 'ineq', 'inline', 'ipred', 'itertools', 'its',
'kinship2', 'klaR', 'knitr', 'ks',
'lars', 'lattice', 'latticeExtra', 'lava', 'lava.tobit', 'leaps',
'LearnBayes', 'lmtest', 'locfit', 'logcondens', 'logspline',
'longmemo',
'mapproj', 'maps', 'maptools', 'markdown', 'MatrixModels', 'maxLik',
'mda', 'mets', 'mboost', 'microbenchmark', 'misc3d', 'miscTools',
'mlbench', 'mlogit', 'modeltools', 'MPV', 'mratios', 'multcomp',
'multicool',
'neuralnet', 'nnet', 'nor1mix', 'np', 'numDeriv', 'nws',
'party', 'PBSmapping', 'pcaPP', 'plm', 'plotmo', 'plotrix', 'polyclip',
'prodlim', 'pls', 'plyr', 'pROC', 'proxy',
'quadprog', 'quantreg',
'R2HTML', 'RandomFields', 'randomForest', 'RANN', 'reshape', 'reshape2',
'rgl', 'RH2', 'RJDBC', 'rlecuyer', 'Rmalschains', 'Rmpi', 'ROCR',
'robust', 'robustbase', 'roxygen2', 'rpanel', 'rpart',
'rpart.plot', 'rrcov', 'RSNNS', 'rsprng', 'rstudioapi', 'RUnit',
'sampleSelection', 'scatterplot3d', 'sfsmisc', 'shapefiles', 'shiny',
'SimComp', 'sm', 'snow', 'snowfall', 'som', 'spam', 'SparseM',
'spatstat', 'spdep', 'spls', 'sqldf', 'stashR', 'statmod',
'strucchange', 'svGUI', 'svUnit', 'systemfit',
'tensor', 'testit', 'testthat', 'TH.data', 'timeDate', 'timereg',
'tkrplot',
'tree', 'tripack', 'truncreg', 'TSA', 'tseries',
'ucminf', 'urca',
'xlsx', 'xlsxjars', 'XML'),
dependencies = TRUE)
q()
?install.packages
install.packages(c(
'abind', 'ada', 'ADGofTest', 'AER', 'AGD', 'AICcmodavg', 'akima',
'Amelia',
'animation',
'ape', 'arm', 'ascii',
'BayesX', 'BB', 'bbmle', 'bdsmatrix', 'biclust', 'biglm', 'bit',
'bit64',
'brew',
'BRugs',
'ca', 'cacheSweave', 'Cairo', 'candisc', 'caret', 'catdata', 'cba',
'cem',
'clue',
'combinat', 'CompQuadForm', 'coin',
'copula', 'corpcor', 'corrgram', 'corrplot',
'coxme', 'cubature',
'data.table', 'date', 'deldir', 'denstrip', 'DEoptimR', 'deSolve',
'devtools', 'dfoptim', 'DierckxSpline',
'diptest', 'doSNOW', 'dynlm',
'e1071', 'earth', 'Ecdat', 'Ecfun', 'effects', 'elasticnet', 'ellipse',
'emdbook', 'expm',
'expsmooth',
'Fahrmeir', 'fastICA', 'fastmatch', 'fBasics', 'fda', 'fdrtool',
'fields',
'filehash',
'fit.models', 'flexclust',
'flexmix',
'fma', 'FMStable',
'forecast', 'fpp', 'fracdiff', 'FRB',
'gam', 'GAMBoost', 'gamlss', 'gamlss.data', 'gamlss.dist',
'gamm4', 'gclus', 'gdata',
'gbm', 'gee', 'geepack', 'geoR', 'geoRglm', 'ggplot2', 'glasso',
'glmmML',
'glmnet', 'gmodels', 'gmp',
'gof',
'googleVis', 'GPArotation',
'gplots', 'gsl', 'gss',
'heplots', 'hexbin',  'huge',
'igraph', 'igraphdata', 'ineq', 'inline', 'ipred', 'isa2',
'itertools', 'its',
'kinship2', 'klaR', 'knitr', 'ks',
'lars', 'lattice', 'latticeExtra', 'lava', 'lava.tobit', 'lavaan',
'lavaan.survey',
'leaps',
'LearnBayes', 'lisrelToR',
'lmtest', 'locfit', 'logcondens', 'logspline',
'lokern',
'longmemo', 'lpSolve', 'lqa',
'mapproj', 'maps', 'maptools', 'markdown', 'Matching',
'MatchIt', 'matrixcalc', 'MatrixModels',
'maxLik', 'MBESS', 'mclust', 'MCMCpack',
'mda', 'mets', 'mboost', 'microbenchmark', 'mi', 'mice',
'misc3d', 'miscTools', 'mitools',
'mix',
'mlbench', 'mlogit', 'mnormt', 'modeltools', 'MplusAutomation',
'MPV', 'mratios',
'multcomp',
'multicool', 'MuMIn', 'mvnormtest',
'network', 'neuralnet', 'nnet', 'nor1mix', 'np', 'numDeriv', 'nws',
'optextras', 'optmatch', 'optimx', 'ordinal',
'pan', 'party', 'pbivnorm', 'PBSmapping', 'pcaPP', 'penalized', 'plm',
'plotmo', 'plotrix',
'poLCA',  'polyclip', 'polspline', 'polycor', 'polynom',
'PolynomF',
'prodlim', 'pls', 'plyr', 'pROC', 'proxy', 'pspline', 'psych',
'qgraph', 'quadprog', 'quantreg',
'R.matlab', 'R.methodsS3', 'R.oo', 'R.utils', 'R2jags',
'R2HTML', 'R2OpenBUGS', 'R2WinBUGS',
'RandomFields',
'randomForest',
'RANN', 'rbounds',
'Rcgmin', 'RcppArmadillo', 'Rcsdp', 'relations',
'reshape',
'reshape2', 'rgenoud',
'rgl', 'Rglpk', 'RH2', 'RItools', 'rjags',
'RJDBC', 'rlecuyer', 'Rmalschains', 'Rmpfr', 'Rmpi',
'rms', 'rockchalk', 'ROCR',
'robust', 'robustbase', 'roxygen2', 'rpanel', 'rpart',
'rpart.plot', 'rrcov', 'RSNNS', 'rsprng', 'rstudioapi',
'Rsymphony', 'RUnit',
'Rvmmin',
'sampleSelection', 'scatterplot3d', 'sem', 'semPlot', 'semTools',
'seriation', 'setRNG', 'sets', 'sfsmisc',
'shapefiles',
'shiny', 'simsem',
'SimComp', 'slam', 'Sleuth2', 'sm', 'sna',
'snow', 'snowfall', 'som', 'spam', 'SparseM',
'spatstat', 'spdep', 'splancs', 'spls', 'sqldf', 'stashR',
'statmod',
'stabledist', 'strucchange', 'SuppDists', 'survey',
'svGUI', 'svUnit', 'systemfit',
'tcltk2', 'tensor', 'testit', 'testthat', 'TH.data', 'timeDate',
'timereg', 'timeSeries', 'tis',
'tkrplot', 'tree', 'tripack', 'truncreg', 'TSA', 'tseries', 'TSP',
'tweedie',
'ucminf', 'unmarked', 'urca',
'vcdExtra', 'VGAM', 'VGAMdata', 'vioplot',
'WhatIf',
'xlsx', 'xlsxjars', 'XML',
'Zelig'),
dependencies = TRUE)
library(devtools)
install_github('rcharts', 'ramnathv')
?shiny
??shiny
install_github('slidify', 'ramnathv')
?install_github
install_github(c('rcharts', 'slidify'), 'ramnathv')
install.packages(c(‘weaver’, ‘gpclib’, ‘affy’, ‘marray’, ‘Biobase’, ‘graph’, ‘Rgraphviz’, ‘OpenMx’, ‘globaltest’, ‘doMC’, ‘RSVGTipsDevice’, ‘rpvm’), dep = TRUE)
install.packages(c('weaver', 'gpclib', 'affy', 'marray', 'Biobase', 'graph', 'Rgraphviz', 'OpenMx', 'globaltest', 'doMC', 'RSVGTipsDevice', 'rpvm'), dep = TRUE)
urlTrain <-
'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv'
urlTest <-
'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv'
# Download data
setInternet2(TRUE)
datTrain <- read.csv(urlTrain, stringsAsFactors = FALSE)
datTest <- read.csv(urlTest, stringsAsFactors = FALSE)
names(datTrain)
head(datTrain)
names(datTrain)
install.packages("manipulate")
library(manipulate)
libary(nnet)
library(nnet)
?nnet
getwd()
setwd('D:\Cloud\Box Sync\shinyApp')
setwd('D:/Cloud/Box Sync/shinyApp')
library(shiny)
setwd('D:/Cloud/Box Sync')
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
dat <- mtcars
model <- lm(mpg ~ wt, data = mtcars)
plot(model)
plot(mpg ~ wt, mtcars)
abline()
abline(model)
plot(mpg ~ wt, mtcars, col = 'blue')
plot(mpg ~ wt, mtcars, col = 'darkblue')
plot(mpg ~ wt, mtcars, col = 'blue')
abline(model, col = 'red')
plot(mpg ~ wt, mtcars, col = 'blue')
title('MPG vs. WT')
abline(model, col = 'red')
plot(mpg ~ wt, mtcars, col = 'blue')
title('MPG vs. Weight')
abline(model, col = 'red')
plot(mpg ~ wt, mtcars, col = 'blue')
title('Car MPG vs. Weight')
abline(model, col = 'red')
dat <- mtcars
model <- lm(mpg ~ wt, mtcars)
plot(mpg ~ wt, mtcars, col = 'blue')
title('Car MPG vs. Weight')
abline(model, col = 'red')
model <- lm(mpg ~ wt, mtcars)
?abline
predMPG <- predict(model, weight)
plot(mpg ~ wt, mtcars, col = 'blue')
title('Car MPG vs. Weight')
abline(model, col = 'red')
abline(v = weight)
abline(h = predMPG)
})
weight = 3
predMPG <- predict(model, weight)
plot(mpg ~ wt, mtcars, col = 'blue')
title('Car MPG vs. Weight')
abline(model, col = 'red')
abline(v = weight)
abline(h = predMPG)
})
predMPG
model <- lm(mpg ~ wt, mtcars)
predMPG <- predict(model, weight)
predMPG <- predict(model, wt = weight)
predMPG <- predict(model, wt = weight)
plot(mpg ~ wt, mtcars, col = 'blue')
title('Car MPG vs. Weight')
abline(model, col = 'red')
abline(v = weight)
abline(h = predMPG)
predMPG
weight
predMPG <- predict(model, weight)
model
predMPG <- predict(model, newdata = weight)
?predict
summary(model)
wt
mtcars$wt
weight = 3.0
predMPG <- predict(model, newdata = weight)
model
predict(model, 3)
predict(model, wt)
predict(model, mtcars$wt)
?predict.lm
predMPG <- predict(model, newdata = as.data.frame(weight))
as.data.frame(weight)
dataFrame <- as.data.frame(weight)
names(dataFrame) <- 'wt'
predMPG <- predict(model, dataFrame)
plot(mpg ~ wt, mtcars, col = 'blue')
title('Car MPG vs. Weight')
abline(model, col = 'red')
abline(v = weight)
abline(h = predMPG)
?abline
runApp(shinyApp)
getwd()
runApp('shinyApp')
runApp('shinyApp')
dataFrame <- as.data.frame(weight/1000)
names(dataFrame) <- 'wt'
predMPG <- predict(model, dataFrame)
plot(mpg ~ wt, mtcars, col = 'blue')
title('Car MPG vs. Weight')
abline(model, col = 'red')
abline(v = weight)
abline(h = predMPG)
dataFrame <- as.data.frame((weight/1000)
names(dataFrame) <- 'wt'
predMPG <- predict(model, dataFrame)
plot(mpg ~ wt, mtcars, col = 'blue')
title('Car MPG vs. Weight')
abline(model, col = 'red')
abline(v = weight)
abline(h = predMPG)
dataFrame <- as.data.frame((weight/1000))
names(dataFrame) <- 'wt'
predMPG <- predict(model, dataFrame)
plot(mpg ~ wt, mtcars, col = 'blue')
title('Car MPG vs. Weight')
abline(model, col = 'red')
abline(v = weight)
abline(h = predMPG)
dataFrame
runApp('shinyApp')
runApp('shinyApp')
runApp('shinyApp')
runApp('shinyApp')
runApp('shinyApp')
?lines
abline(model, col = 'red', lwd = 3)
title(paste('Car Weight (lbs \'000) = ', wt, sep =''))
title(paste('Car Weight (lbs \'000) = ', weight, sep =''))
runApp('shinyApp')
runApp('shinyApp')
runApp('shinyApp')
runApp('shinyApp')
runApp('shinyApp')
runApp('shinyApp')
runApp('shinyApp')
runApp('shinyApp')
install.packages('shinyapps')
library(devtools)
install_github('rstudio/shinyapps')
library(shinyApps)
library(shinyapps)
deployApp()
shinyapps::setAccountInfo(name='luongthevinh', token='1DDAC3085A5B0760FCCBB7277B059428', secret='n//nT04ufG94oJoPtvr2Q9HBu6gv8w923PQFGC61')
deployApp()
runApp('predictMPG')
deployApp('predictMPG')
runApp('predictMPG')
runApp('predictMPG')
runApp('predictMPG')
runApp('predictMPG')
runApp('predictMPG')
runApp('predictMPG')
runApp('predictMPG')
runApp('predictMPG')
runApp('predictMPG')
deployApp('predictMPG')
library(slidify)
library(slidifyLibraries)
setwd('D:/Cloud/Box Sync/GitHub/LuongTheVinh/slidify_predictMPG')
author()
author('newDeck')
?mtcars
q()
